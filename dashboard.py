import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –æ—á–∫–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ê–Ω–∞–ª–∏–∑ –æ—á–∫–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
st.markdown("---")

@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ employee_points_daily
    employee_points_daily_january = pd.read_csv('output/employee_points_daily_2025_01.csv')
    employee_points_daily_february = pd.read_csv('output/employee_points_daily_2025_02.csv')
    employee_points_daily_march = pd.read_csv('output/employee_points_daily_2025_03.csv')
    employee_points_daily_april = pd.read_csv('output/employee_points_daily_2025_04.csv')
    employee_points_daily_may = pd.read_csv('output/employee_points_daily_2025_05.csv')
    employee_points_daily_june = pd.read_csv('output/employee_points_daily_2025_06.csv')
    employee_points_daily_july = pd.read_csv('output/employee_points_daily_2025_07.csv')
    employee_points_daily_august = pd.read_csv('output/employee_points_daily_2025_08.csv')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ employee_points_daily
    employee_points_daily_full = pd.concat([
        employee_points_daily_january, employee_points_daily_february, employee_points_daily_march, 
        employee_points_daily_april, employee_points_daily_may, employee_points_daily_june, 
        employee_points_daily_july, employee_points_daily_august
    ])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ skills_mark
    skills_mark_january = pd.read_csv('output/rating_linear_col9_2025_01.csv')
    skills_mark_february = pd.read_csv('output/rating_linear_col9_2025_02.csv')
    skills_mark_march = pd.read_csv('output/rating_linear_col9_2025_03.csv')
    skills_mark_april = pd.read_csv('output/rating_linear_col9_2025_04.csv')
    skills_mark_may = pd.read_csv('output/rating_linear_col9_2025_05.csv')
    skills_mark_june = pd.read_csv('output/rating_linear_col9_2025_06.csv')
    skills_mark_july = pd.read_csv('output/rating_linear_col9_2025_07.csv')
    skills_mark_august = pd.read_csv('output/rating_linear_col9_2025_08.csv')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ skills_mark
    skills_mark_full = pd.concat([
        skills_mark_january, skills_mark_february, skills_mark_march, skills_mark_april,
        skills_mark_may, skills_mark_june, skills_mark_july, skills_mark_august
    ])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    tasks_full_january = pd.read_csv('output/employee_daily_tasks_points_full_2025_01.csv')
    tasks_full_february = pd.read_csv('output/employee_daily_tasks_points_full_2025_02.csv')
    tasks_full_march = pd.read_csv('output/employee_daily_tasks_points_full_2025_03.csv')
    tasks_full_april = pd.read_csv('output/employee_daily_tasks_points_full_2025_04.csv')
    tasks_full_may = pd.read_csv('output/employee_daily_tasks_points_full_2025_05.csv')
    tasks_full_june = pd.read_csv('output/employee_daily_tasks_points_full_2025_06.csv')
    tasks_full_july = pd.read_csv('output/employee_daily_tasks_points_full_2025_07.csv')
    tasks_full_august = pd.read_csv('output/employee_daily_tasks_points_full_2025_08.csv')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    tasks_full = pd.concat([
        tasks_full_january, tasks_full_february, tasks_full_march, tasks_full_april,
        tasks_full_may, tasks_full_june, tasks_full_july, tasks_full_august
    ])

    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∏–º—è
    employee_name_mapping = skills_mark_full[['id_employee', 'fio_employee']].drop_duplicates()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ employee_points_daily_full
    employee_points_daily_full = employee_points_daily_full.merge(
        employee_name_mapping, 
        on='id_employee', 
        how='left'
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ tasks_full
    tasks_full = tasks_full.merge(
        employee_name_mapping, 
        on='id_employee', 
        how='left'
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    employee_points_daily_full['date'] = pd.to_datetime(employee_points_daily_full['date'])
    employee_points_daily_full = employee_points_daily_full.sort_values('date')

    tasks_full['date'] = pd.to_datetime(tasks_full['date'])
    tasks_full = tasks_full.sort_values('date')

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π –¥–ª—è skills_mark (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)
    skills_mark_full['date'] = pd.to_datetime(skills_mark_full[['year', 'month']].assign(day=1))
    skills_mark_full = skills_mark_full.sort_values('date')

    return employee_points_daily_full, skills_mark_full, employee_name_mapping, tasks_full

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
employee_points_daily_full, skills_mark_full, employee_name_mapping, tasks_full = load_data()

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
employee_data = employee_points_daily_full[['id_employee', 'fio_employee']].drop_duplicates()
# –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ fio_employee
employee_data = employee_data.dropna(subset=['fio_employee'])
employee_list = sorted(employee_data.values.tolist())
employee_options = [f"{emp[0]} - {emp[1]}" for emp in employee_list]

# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
available_months = sorted(employee_points_daily_full['date'].dt.to_period('M').unique())
month_options = [str(month) for month in available_months]

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")

# –í—ã–±–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
visualization = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é:",
    [
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—á–∫–∏ (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—á–∫–∏ –ø–æ –º–µ—Å—è—Ü—É (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ –º–µ—Å—è—Ü—É)",
        "–ú–µ—Å—è—á–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏ (—Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)", 
        "Skills Mark (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)"
    ]
)

st.markdown(f"## {visualization}")

if visualization == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—á–∫–∏ (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)":
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    selected_employee = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        employee_options,
        index=0
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    selected_employee_id = int(selected_employee.split(' - ')[0])
    selected_employee_name = selected_employee.split(' - ')[1] if ' - ' in selected_employee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_data = employee_points_daily_full[employee_points_daily_full['id_employee'] == selected_employee_id]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=filtered_data['date'],
        y=filtered_data['points'],
        mode='lines+markers',
        name=f"ID: {selected_employee_id}",
        line=dict(width=3, color='#1f77b4'),
        marker=dict(size=6),
        hovertemplate=f'<b>ID: {selected_employee_id}</b><br>' +
                     f'<b>–ò–º—è: {selected_employee_name}</b><br>' +
                     '–î–∞—Ç–∞: %{x}<br>' +
                     '–û—á–∫–∏: %{y}<br>' +
                     '<extra></extra>'
    ))
    
    fig.update_layout(
        title=f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –æ—á–∫–æ–≤: {selected_employee}',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤',
        width=1200,
        height=600,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤", f"{filtered_data['points'].sum():.0f}")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏", f"{filtered_data['points'].mean():.2f}")
    with col3:
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏", f"{filtered_data['points'].max():.0f}")
    with col4:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", f"{len(filtered_data)}")

elif visualization == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—á–∫–∏ –ø–æ –º–µ—Å—è—Ü—É (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ –º–µ—Å—è—Ü—É)":
    # –§–∏–ª—å—Ç—Ä—ã
    selected_month = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        month_options,
        index=0
    )
    
    selected_employee = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        employee_options,
        index=0
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    selected_employee_id = int(selected_employee.split(' - ')[0])
    selected_employee_name = selected_employee.split(' - ')[1] if ' - ' in selected_employee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –≤ –ø–µ—Ä–∏–æ–¥
    selected_month_period = pd.to_datetime(selected_month)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü—É –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    filtered_data = employee_points_daily_full[
        (employee_points_daily_full['id_employee'] == selected_employee_id) &
        (employee_points_daily_full['date'].dt.to_period('M') == selected_month_period.to_period('M'))
    ]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=filtered_data['date'],
        y=filtered_data['points'],
        mode='lines+markers',
        name=f"ID: {selected_employee_id}",
        line=dict(width=3, color='#d62728'),
        marker=dict(size=6),
        hovertemplate=f'<b>ID: {selected_employee_id}</b><br>' +
                     f'<b>–ò–º—è: {selected_employee_name}</b><br>' +
                     '–î–∞—Ç–∞: %{x}<br>' +
                     '–û—á–∫–∏: %{y}<br>' +
                     '<extra></extra>'
    ))
    
    fig.update_layout(
        title=f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—á–∫–∏ –∑–∞ {selected_month}: {selected_employee}',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤',
        width=1200,
        height=600,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤", f"{filtered_data['points'].sum():.0f}")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏", f"{filtered_data['points'].mean():.2f}")
    with col3:
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏", f"{filtered_data['points'].max():.0f}")
    with col4:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", f"{len(filtered_data)}")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏–∑–¥–µ–ª–∏—è–º –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
    st.markdown("### üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏–∑–¥–µ–ª–∏—è–º –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü")
    
    if len(filtered_data) > 0:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        detailed_data = tasks_full[
            (tasks_full['id_employee'] == selected_employee_id) &
            (tasks_full['date'].dt.to_period('M') == selected_month_period.to_period('M'))
        ]
        
        if len(detailed_data) > 0:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            detailed_data_display = detailed_data.copy()
            detailed_data_display['date_formatted'] = detailed_data_display['date'].dt.date
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –æ—á–∫–∞–º
            detailed_data_sorted = detailed_data_display.sort_values(['date', 'points'], ascending=[True, False])
            
            st.markdown(f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ {selected_month}:**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            st.dataframe(
                detailed_data_sorted[['date_formatted', 'sap_id', 'sap_name', 'points', 'units_made']].head(50),
                use_container_width=True,
                column_config={
                    "date_formatted": "–î–∞—Ç–∞",
                    "sap_id": "SAP ID",
                    "sap_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è",
                    "points": "–û—á–∫–∏",
                    "units_made": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                }
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∏–∑–¥–µ–ª–∏—è–º (–∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
            grouped_for_chart = detailed_data.groupby(['sap_id', 'sap_name']).agg({
                'points': 'sum'
            }).reset_index().sort_values('points', ascending=False)
            
            if len(grouped_for_chart) > 0:
                fig_products = px.bar(
                    grouped_for_chart.head(10),
                    x='sap_name',
                    y='points',
                    title=f'–¢–æ–ø-10 –∏–∑–¥–µ–ª–∏–π –ø–æ –æ–±—â–∏–º –æ—á–∫–∞–º –∑–∞ {selected_month}',
                    labels={'sap_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è', 'points': '–û—á–∫–∏'}
                )
                fig_products.update_xaxes(tickangle=45)
                st.plotly_chart(fig_products, use_container_width=True)
        else:
            st.warning(f"–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {selected_month}")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

elif visualization == "–ú–µ—Å—è—á–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏ (—Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)":
    # –§–∏–ª—å—Ç—Ä—ã
    selected_month = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        month_options,
        index=0
    )
    
    selected_employee = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        employee_options,
        index=0
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    selected_employee_id = int(selected_employee.split(' - ')[0])
    selected_employee_name = selected_employee.split(' - ')[1] if ' - ' in selected_employee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_avg = employee_points_daily_full.groupby([
        employee_points_daily_full['date'].dt.to_period('M'), 
        'id_employee'
    ])['points'].mean().reset_index()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –¥–∞—Ç—É
    monthly_avg['date'] = monthly_avg['date'].astype(str)
    monthly_avg['date'] = pd.to_datetime(monthly_avg['date'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    monthly_avg = monthly_avg.merge(employee_name_mapping, on='id_employee', how='left')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_data = monthly_avg[monthly_avg['id_employee'] == selected_employee_id]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=filtered_data['date'],
        y=filtered_data['points'],
        mode='lines+markers',
        name=f"ID: {selected_employee_id}",
        line=dict(width=4, color='#ff7f0e'),
        marker=dict(size=10),
        hovertemplate=f'<b>ID: {selected_employee_id}</b><br>' +
                     f'<b>–ò–º—è: {selected_employee_name}</b><br>' +
                     '–ú–µ—Å—è—Ü: %{x}<br>' +
                     '–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏: %{y:.2f}<br>' +
                     '<extra></extra>'
    ))
    
    fig.update_layout(
        title=f'–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º: {selected_employee}',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü',
        width=1200,
        height=600,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã", f"{filtered_data['points'].mean():.2f}")
    with col2:
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏", f"{filtered_data['points'].max():.2f}")
    with col3:
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏", f"{filtered_data['points'].min():.2f}")
    with col4:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤", f"{len(filtered_data)}")

elif visualization == "Skills Mark (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)":
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    selected_employee = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        employee_options,
        index=0
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    selected_employee_id = int(selected_employee.split(' - ')[0])
    selected_employee_name = selected_employee.split(' - ')[1] if ' - ' in selected_employee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_data = skills_mark_full[skills_mark_full['id_employee'] == selected_employee_id]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=filtered_data['date'],
        y=filtered_data['skills_mark'],
        mode='lines+markers',
        name=f"ID: {selected_employee_id}",
        line=dict(width=4, color='#2ca02c'),
        marker=dict(size=10),
        hovertemplate=f'<b>ID: {selected_employee_id}</b><br>' +
                     f'<b>–ò–º—è: {selected_employee_name}</b><br>' +
                     '–ú–µ—Å—è—Ü: %{x}<br>' +
                     'Skills Mark: %{y}<br>' +
                     '<extra></extra>'
    ))
    
    fig.update_layout(
        title=f'–î–∏–Ω–∞–º–∏–∫–∞ Skills Mark: {selected_employee}',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='Skills Mark',
        width=1200,
        height=600,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–∏–π Skills Mark", f"{filtered_data['skills_mark'].mean():.2f}")
    with col2:
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Skills Mark", f"{filtered_data['skills_mark'].max():.0f}")
    with col3:
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Skills Mark", f"{filtered_data['skills_mark'].min():.0f}")
    with col4:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤", f"{len(filtered_data)}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ—É—Ç–µ—Ä–µ
st.markdown("---")
st.markdown("### üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", f"{len(employee_list)}")

with col2:
    st.metric("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–æ—á–∫–∏)", f"{employee_points_daily_full['date'].min().strftime('%Y-%m-%d')} - {employee_points_daily_full['date'].max().strftime('%Y-%m-%d')}")

with col3:
    st.metric("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (Skills Mark)", f"{skills_mark_full['date'].min().strftime('%Y-%m')} - {skills_mark_full['date'].max().strftime('%Y-%m')}")
